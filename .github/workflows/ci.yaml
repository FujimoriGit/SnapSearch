name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT: SnapSearch.xcodeproj
  SCHEME: SnapSearch
  CONFIGURATION: Debug
  INFO_PLIST_PATH: "./SnapSearch/Info.plist"
  DESTINATION: 'platform=iOS Simulator,OS=18.5,name=iPhone 16 Pro'
  DERIVED_NAME: SnapSearch-DD
  TEST_TARGET: SnapSearchTests

jobs:
  build-and-test:
    # デフォルトブランチへのpushまたはPRのときに実行
    if: ${{ github.ref_name == github.event.repository.default_branch || github.event_name == 'pull_request' }}
    runs-on: macos-latest

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      # 2. DerivedDataをキャッシュ
      - name: Cache DerivedData
        uses: actions/cache@v4.3.0
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-derived-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-xcode-derived-

      # 3. Xcode のセットアップ
      - name: Setup Xcode (latest stable)
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable

      # 4. SPM 依存解決
      - name: Resolve Swift Packages
        run: |
          xcodebuild \
            -project "$PROJECT" \
            -resolvePackageDependencies

      # 5. APIキーをConfig.xcconfigに注入
      - name: Inject PEXELS_API_KEY
        run: |
          echo ${{ secrets.PEXELS_API_KEY }} | base64 -o ${{ env.INFO_PLIST_PATH }} -D


      # 6. 設定が展開されているかを確認
      - name: Show key-related build settings
        run: |
          xcodebuild -scheme "$SCHEME" -configuration "$CONFIGURATION" -showBuildSettings \
            | egrep "PEXELS_API_KEY|INFOPLIST_FILE|GENERATE_INFOPLIST_FILE" || true

      # 6. ビルド ＆ テスト
      - name: Build and test
        run: |
          set -o pipefail
          DERIVED="$HOME/Library/Developer/Xcode/DerivedData/${DERIVED_NAME}"

          xcodebuild build-for-testing \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "$DESTINATION" \
            -derivedDataPath "$DERIVED" \
            -enableCodeCoverage NO \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -only-testing:"$TEST_TARGET"

          xcodebuild test-without-building \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -destination "$DESTINATION" \
            -derivedDataPath "$DERIVED" \
            -only-testing:"$TEST_TARGET" \
            -enableCodeCoverage NO
